// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static Array ram;
	static Array freeList;
	static int freeListCount;
	static int notCarvedMem;
	
    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let notCarvedMem = 2048;
		let freeListCount = 0;
		let freeList = null;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) 
	{
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) 
	{
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) 
	{
		
		var int bestFitVar;
		var int firstFitVar;
		
		let bestFitVar = Memory.bestFit(size);
		
		if(bestFitVar > 0)
		{
			return bestFitVar;
		}
		
		let firstFitVar = Memory.firstFit(size);
		
		if(firstFitVar > 0)
		{
			return firstFitVar;
		}

		do Memory.carveNewMemBlock(size);
		
		return notCarvedMem-size-2;
    }
	
	
	function int firstFit(int size)
	{
		var int i, val, val2, val3;
		var int addrToReturn;
		let i = 0;
		
		while(i<freeListCount)
		{
			let val = freeList[i]; 

			let val2 = val + 1;
			let val3 = ram[val2];
			if(val3 > size + 2)
			{
				let addrToReturn = freeList[i];
				let freeList[i] = null;
				return addrToReturn;
			}

		}
		
		return -1;
	}
	
	function int bestFit(int size)
	{
		var int i, val, val2, val3;
		var int addrToReturn;
		let i = 0;
		
		while(i<freeListCount)
		{
			let val = freeList[i]; 

			let val2 = val + 1;
			let val3 = ram[val2];
			if(val3 = size + 2)
			{
				let addrToReturn = freeList[i];
				let freeList[i] = null;
				return addrToReturn;
			}

		}
		
		
		return -1;
	}
	
	function void carveNewMemBlock(int size)
	{

		let ram[notCarvedMem] = notCarvedMem;
		let ram[notCarvedMem + 1 ] = size;
		let notCarvedMem = notCarvedMem+size+2;
		
		return;
	}
	

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array toDeAlloc) 
	{
		var Array newFreeList;
		var int i;
		let i = 0;
		let freeListCount = freeListCount +1; 
		let newFreeList = Array.init(freeListCount);
		
		while(i < freeListCount)
		{
			let newFreeList	= freeList[i];
		}
		let newFreeList[freeListCount] = toDeAlloc[0];
		let freeList = newFreeList;
		return;
    }    
}
