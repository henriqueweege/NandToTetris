// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	
	static Array screen;
	static boolean color;
	static Array powersOfTwo;
    
	/** Initializes the Screen. */
    function void init() 
	{
		let screen = 16384;
		let color = true;
		let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        let powersOfTwo[1] = 2;
        let powersOfTwo[2] = 4;
        let powersOfTwo[3] = 8;
        let powersOfTwo[4] = 16;
        let powersOfTwo[5] = 32;
        let powersOfTwo[6] = 64;
        let powersOfTwo[7] = 128;
        let powersOfTwo[8] = 256;
        let powersOfTwo[9] = 512;
        let powersOfTwo[10] = 1024;
        let powersOfTwo[11] = 2048;
        let powersOfTwo[12] = 4096;
        let powersOfTwo[13] = 8192;
        let powersOfTwo[14] = 16384;
        let powersOfTwo[15] = 16384+16384;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() 
	{
		var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) 
	{
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) 
	{
		var int address, value, mask, toThePower;
		
		let address = (32 * y) + (x / 16) + 16384;
		let value = Memory.peek(address);
		let toThePower = x & 15;
		let mask = powersOfTwo[toThePower];
		
		if(color)
		{
            let screen[address] = screen[address] | mask;
        }
		else
		{
            let screen[address] = screen[address] & ~mask;
        }
		
		
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) 
	{
		var int a, b, dx, dy, x, y;
		let a = 0;
		let b = 0;
		
		let dx = x1 - x2;
		let dy = y1 - y2;

		if(dx>0)
		{
			while(((a < dx) & (b < dy)) | ((a = dx) & (b = dy)))
			{
				do Screen.drawPixel(x + a, y + b);
				
				if(b/a > dy/dx)
				{
					let a = a + 1;
				}
				
				else
				{
					let b = b + 1;
				}
			}
		}
		else
		{
			while(((a > dx) & (b > dy)) | ((a = dx) & (b = dy)))
			{
				do Screen.drawPixel(x + a, y + b);
				
				if(b/a < dy/dx)
				{
					let a = a - 1;
				}
				
				else
				{
					let b = b - 1;
				}
			}
		}
		
		
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
	{
		while((x1<x2)|(x1<x2))
		{
			do Screen.drawLine(x1,y1, x1, y2);
			{
				let x1 = x1 +1;
				let y1= y1 +1;
			}
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) 
	{
		var int dx, dy, x1, x2, temp;
        var int rSquared;
        
        let dy = -r;
        let rSquared = r*r;
        while( ~(dy > r) ) {
            
			let dx = Math.sqrt(rSquared-(dy*dy));
			
			let x1 = x-dx;
			let x2 = x+dx;
			let y = y+dy;
			if(x1 > x2){
				let temp = x1;
				let x1 = x2;
				let x2 = temp;
			}
			while(~(x2 < x1)){
				do Screen.drawPixel(x1,y);
				let x1 = x1 + 1;
			}
			
            let dy = dy + 1;
        }
        return;
    }

}
